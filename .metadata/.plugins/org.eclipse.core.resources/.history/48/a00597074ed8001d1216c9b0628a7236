package kr.ac.sbs.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.command.SearchCriteria;
import com.command.service.MemberService;
import com.command.utils.MakeFileName;
import com.jsp.dto.MemberVO;

import kr.ac.sbs.command.MemberModifyCommand;
import kr.ac.sbs.command.MemberRegistCommand;

@Controller
@RequestMapping("/member")
public class MemberController {

	@Autowired
	private MemberService memberService;

	@GetMapping("/main")
	public void main() {
	}

	@GetMapping("/list")
	public void list(SearchCriteria cri, HttpServletRequest request) throws Exception {

		if (cri.getPage() < 1)
			cri.setPage(1);
		if (cri.getPerPageNum() < 1)
			cri.setPerPageNum(10);

		Map<String, Object> dataMap = memberService.getMemberList(cri);

		request.setAttribute("dataMap", dataMap);

	}

	@GetMapping("/registForm")
	public String registForm() {
		String url = "/member/regist";
		return url;
	}

	@PostMapping("/regist")
	public String regist(MemberRegistCommand registReq) throws Exception {
		String url = "/member/regist_success";

		MemberVO member = registReq.toMemberVO();

		memberService.regist(member);

		return url;
	}

	@GetMapping("/detail")
	public void detail(String id, HttpServletRequest request) throws Exception {
		MemberVO member = memberService.getMember(id);
		request.setAttribute("member", member);
	}

	@Resource(name = "picturePath")
	private String picturePath;

	@PostMapping(value = "/picture", produces = "text/plain;charset=utf-8")
	@ResponseBody
	public String pictureUpload(@RequestParam("pictureFile") MultipartFile multi, String oldPicture) throws Exception {

		String result = "";

		/* 파일저장확인 */
		result = savePicture(oldPicture, multi);

		return result;

	}

	public String savePicture(String oldPicture, MultipartFile multi) throws Exception {

		String fileName = "";

		/* 파일저장폴더설정 */
		String uploadPath = this.picturePath;

		/* 파일유뮤확인 */
		if (!(multi == null || multi.isEmpty() || multi.getSize() > 1024 * 1024 * 1)) {

			fileName = MakeFileName.toUUIDFileName(multi.getOriginalFilename(), "$$");
			File storeFile = new File(uploadPath, fileName);

			// 파일경로 생성
			storeFile.mkdirs();

			// local HDD에 저장
			multi.transferTo(storeFile);

		}

		// 기존파일 삭제
		if (oldPicture != null && !oldPicture.isEmpty()) {

			File oldFile = new File(uploadPath, oldPicture);
			if (oldFile.exists()) {
				oldFile.delete();
			}

		}

		return fileName;

	}

	@GetMapping("/getPicture")
	@ResponseBody
	public byte[] getPicture(String id) throws Exception {

		MemberVO member = memberService.getMember(id);
		if (member == null)
			return null;

		String picture = member.getPicture();
		String imgPath = this.picturePath;

		InputStream in = new FileInputStream(new File(imgPath, picture));

		return IOUtils.toByteArray(in);

	}

	@GetMapping("/idCheck")
	@ResponseBody
	public String idCheck(String id) throws Exception {

		String result = "";
		MemberVO member = memberService.getMember(id);

		if (member != null) {
			result = "duplicated";
		} else {
			result = "";
		}

		return result;

	}

	@GetMapping("/modifyForm")
	public String modifyForm(String id, Model model) throws Exception {
		String url = "/member/modify";

		MemberVO member = memberService.getMember(id);

		String picture = MakeFileName.parseFileNameFromUUID(member.getPicture(), "\\$\\$");
		member.setPicture(picture);

		model.addAttribute("member", member);

		return url;
	}

	@PostMapping(value = "/modify", produces = "text/plain;charset=utf-8")
	public String modify(MemberModifyCommand modifyReq, HttpSession session) throws Exception {
		String url = "redirect:/member/detail.do?id=" + modifyReq.getId();

		MemberVO member = modifyReq.toMemberVO();
		String oldPicture = memberService.getMember(modifyReq.getId())
				.getPicture();
		if (modifyReq.getPicture() != null && modifyReq.getPicture().getSize() > 0) {
			String fileName = savePicture(oldPicture, modifyReq.getPicture());
			member.setPicture(fileName);
		} else {
			member.setPicture(oldPicture);
		}
		memberService.modify(member);
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		if(loginUser != null && member.getId().equals(loginUser.getId())) {
			session.setAttribute("loginUser", memberService.getMember(member.getId()));
		}
		
		return url;
	}
}
